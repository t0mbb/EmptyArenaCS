# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
  system.debug: 'true'

stages:
- stage: Build
  displayName: Build stage
  jobs: 
  - job: BuildJob
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: 20.x
      displayName: Install Node.js 20

    - script: |
        set -e
        npm ci
        npm i -g nx
      displayName: Install dependencies

    - script: |
        set -e
        nx run-many --targets=build
        cp package.json package-lock.json dist/apps/emp
        cd dist/apps/emp
        npm ci --omit=dev
      displayName: Build application

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: dist/apps/emp
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/emp-be_$(Build.BuildId).zip
        replaceExistingArchive: true

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: dist/apps/cms-fe
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/emp-fe_$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: emp

- stage: Deploy_Backend
  displayName: Deploy Backend stage
  dependsOn: Build
  condition: succeeded()
  jobs:
    - deployment: DeploymentJob
      environment: EmptyArena
      pool:
        vmImage: ubuntu-latest
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureRmWebAppDeployment@4
              displayName: 'Back-end Deploy'
              inputs:
                azureSubscription: Empty
                appType: webAppLinux
                WebAppName: emptyarena-be
                RuntimeStack: 'NODE|20-lts'
                packageForLinux: $(Pipeline.Workspace)/**/emp-be_$(Build.BuildId).zip
                StartupCommand: 'node main.js'

- stage: Deploy_Frontend
  displayName: Deploy Frontend stage
  dependsOn: Build
  condition: succeeded()
  jobs:
    - deployment: DeploymentJob
      environment: EmptyArena
      pool:
        vmImage: ubuntu-latest
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureRmWebAppDeployment@4
              displayName: 'Front-end Deploy'
              inputs:
                azureSubscription: Empty
                appType: webApp
                WebAppName: emptyarena-fe
                RuntimeStack: 'NODE|20-lts'
                packageForLinux: $(Pipeline.Workspace)/**/emp-fe_$(Build.BuildId).zip
                StartupCommand: 'pm2 serve /home/site/wwwroot --no-daemon'
